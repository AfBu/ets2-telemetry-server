/* 
    ETS2 dashboard skin template.
    
    If you want to create your own dashboard skin (or tweak something)
    create a copy of the "/skins/template" directory and rename it
    to something like: "/skins/your_skin_name" and edit config.json file inside.
    For more information see skin tutorial PDF.

    CSS naming convention:

    - Dashboard core script maps all telemetry data properties to respective class names,
      so truck's speed will be .truckSpeed and current gear is .gear (see JSON).
    - All boolean telemetry properties will have a special ".yes" class added 
      when the value is true (will be removed if value is false).
    - When dashboard core script updates DOM it will always add 
      data-value attribute containing current value, so you 
      can use it to have custom css selectors based on the actual data 
      (for example, this skin uses .gear[data-value="N"] to define
      different style for neutral or reverse gear, see below).
    - If you need to define your own style related classes.
      I stronly recommend to use underscore prefix ("._job" for example) to distinguish names,
      so you will never forget which classes are dynamic and which are static.
*/

.dashboard {
	background-image: url("images/bg-off.jpg");
}

.dashboard.connected.yes {
	background-image: url("images/bg-on.jpg");
}

._speed {
    visibility: hidden;
}

/* hide speed when not connected to the simulator */

.connected.yes ._speed {
    visibility: visible;
    color: white;
    font-family: Courier New, Courier, monospace;
    font-weight: bold;
    font-size: 300px;
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    text-align: center;
    line-height: 1152px;
}

.truck-speedRounded {
    color: green;
}

.connected.yes .statusMessage {
    visibility: hidden;
}

.statusMessage {
    font-size: 70px;
    text-align: center;
    line-height: 1152px;
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    color: orange;
}